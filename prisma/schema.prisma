generator client {
  provider = "prisma-client-js"
  url      = env("DATABASE_URL")
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum UserStatus {
  active
  pending
  suspended
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  roles       Role[]  @relation("RolePermissions")
  users       User[]  @relation("UserPermissions")
}

model User {
  user_id     Int       @id @default(autoincrement())
  username    String
  email       String    @unique
  phone       String
  password    String
  verified    Boolean   @default(false)
  status      UserStatus @default(pending)
  deletedAt   DateTime?  

  roles            Role[]       @relation("UserRoles")
  permissions      Permission[] @relation("UserPermissions")
  providerAccounts ProviderAccount[]
  branch_id   Int?
  branch      Branch?   @relation(fields: [branch_id], references: [branch_id])
  merchantProfile   MerchantProfile? // Optional one-to-one

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  @@index([deletedAt]) // optional: improves querying non-deleted users
}
model PasswordResetOTP {
  id           Int      @id @default(autoincrement())
  email        String
  otp          String
  verified     Boolean  @default(false)
  type         String   // 'email_verification' | 'reset_password'
  expires_at   DateTime
  created_at   DateTime           @default(now())
}
model ProviderAccount {
  id       String   @id @default(cuid())
  provider String
  user     User     @relation(fields: [userId], references: [user_id])
  userId   Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?         @updatedAt
}

model Branch{
  branch_id     Int       @id @default(autoincrement())
  branch_name   String  
  branch_phone  String  
  branch_email  String    @unique
  lat           String  
  lng           String  
  employees     User[]
  merchantProfile_id   MerchantProfile      @relation(fields: [profileId],references:[id])
  profileId     Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?         @updatedAt
  deletedAt         DateTime?
}

model MerchantProfile{
  id                Int       @id @default(autoincrement())
  documents     Json?
  branches          Branch[]
  merchant_id       User      @relation(fields: [userId],references:[user_id])
  userId            Int              @unique
  profile_image            Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?         @updatedAt
  deletedAt         DateTime?
}


